<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://an.com/chopsticks/provider/XACMLAuthorizer"
    xmlns:provider="http://an.com/chopsticks/provider/XACMLAuthorizer"
    xmlns:cs="http://an.com/chopsticks/configuration">
    <import namespace="http://an.com/chopsticks/configuration" schemaLocation="chopsticks.xsd"/>
    <element name="XACMLAuthorizer" type="provider:XACMLAuthorizerType" substitutionGroup="cs:Authorizer"/>
    <complexType name="XACMLAuthorizerType">
        <complexContent>
            <extension base="cs:AuthorizerType">
                <sequence>
                    <element ref="provider:DataStore"/>
                    <element ref="provider:ContextFactory"/>
                    <element ref="provider:CacheManager"/>
                    <!-- We provide such mechanism that can load policies referenced by a PolicyIdReference  -->
                    <!-- or a PolicySetIdReference element. Users can write their own PolicyResolver to      -->
                    <!-- resolve those referenced policies.                                                  -->
                    <element ref="provider:PolicyResolverRegistry" minOccurs="0"/>
                    <element ref="provider:AttributeRetrieverRegistry" minOccurs="0"/>
                </sequence>
                <!-- The domain name is the PDP's identity, it must be identical among all configured PDPs   -->
                <attribute name="domainName" type="string" use="required"/>
                <!-- This attribute provides a function id. The function is used to determine which Decision -->
                <!-- object will be returned when multiple policies or policySets match a same request.      -->
                <!-- The function should has following signature:                                            -->
                <!--              function(EvaluationContext ctx, Object[] params) : Result                  -->
                <!-- The params[0] is an array of AbstractPolicy.                                            -->
                <!-- For now we support following algorithms:                                                -->
                <!--              an:multiple-policies-deny-overrides,                                       -->
                <!--              an:multiple-policies-permit-overrides,                                     -->
                <!--              an:multiple-policies-first-applicable,                                     -->
                <!--              an:multiple-policies-only-one-applicable                                   -->
                <attribute name="multiPoliciesCombineAlg" type="anyURI" use="required"/>
                <!-- The attribute "MustBePresent" is defined in AttributeDesignator, its default value is   -->
                <!-- false, means if a request doesn't provide the request attribute, the designator will    -->
                <!-- return an empty bag. If this value is true, when a designated attribute is missing,     -->
                <!-- designator should throw an indeterminate error.                                         -->
                <!-- We place this configure item here, is to turn on or turn off support for this feature,  -->
                <!-- when the configure item is set to false, regardless the "MustBePresent" value in policy,-->
                <!-- the designator will never throw the indeterminate error, it just return the empty bag.  -->
                <!-- When the configure item is set to true, the designator will conform with standard.      -->
                <!-- The reason of provide this configure item is if "MustBePresent" is set to true for a    -->
                <!-- policy, regardless the policy is match with the request or not, it is has to be         -->
                <!-- performed match operation against the request, we don't want do this.                   -->
                <!-- Because we have an indexable mechanism, which will pre-process the policy's target,     -->
                <!-- and then use those attributes required by policy as indexes. The coming requests will   -->
                <!-- use these indexes to find policies that match with them, don't need to perform match    -->
                <!-- operation on all policies.  So set this configure item to "false" will improve the      -->
                <!-- PDP's performance.                                                                      -->
                <attribute name="supportMustBePresent" type="boolean" use="optional" default="true"/>
                <!-- AttributeValue and its sub-class(AttributeAssignment) all support free form in their    -->
                <!-- actual value field. So one can put an Expression typed element under AttributeValue or  -->
                <!-- AttributeAssignment. PDP can evaluate this expression and use the result as the parents -->
                <!-- AttributeValue or AttributeAssignment's evaluation result. Following configuration item -->
                <!-- is an option which is used to enable or disable this feature.                           -->
                <!-- Note! we only provide such option for XACML policy element, we don't support the option -->
                <!-- for context element.                                                                    -->
                <attribute name="supportInnerExpression" type="boolean" use="optional" default="false"/>
                <!-- While this attribute is set to true, PDP will try to resolve all referenced policies,   -->
                <!-- otherwise, those referenced policies will be resolved while they are matching or        -->
                <!-- evaluating.                                                                             -->
                <attribute name="resolveReferencedPoliciesOnLoad" type="boolean" use="optional" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    
    <!-- The DataStore element defines an abstract data store configuration, which can be replaced   -->
    <!-- by an actual data store configuration. We provides a default file data store configuration, -->
    <!-- which will load all policy files from a specific path.                                      -->
    <element name="DataStore" type="provider:DataStoreType" abstract="true"/>
    <complexType name="DataStoreType" abstract="true">
        <!-- The actual data store implementation class                                              -->
        <attribute name="an.xacml.engine.DataStore" type="string" use="required"/>
    </complexType>
    
    <!-- This is a file type data store. you may add a custom type data store, such as a RDBMS one.  -->
    <!-- Make sure it extends DataStoreType, and the element's substitutionGroup attribute should be -->
    <!-- "provider:DataStore".                                                                             -->
    <!-- If there is no PolicyResolver configured, by default, FileDataStore will try to resolve all -->
    <!-- referenced policies from its configured path.                                               -->
    <element name="FileDataStore" type="provider:FileDataStoreType" substitutionGroup="provider:DataStore"/>
    <complexType name="FileDataStoreType">
        <complexContent>
            <extension base="provider:DataStoreType">
                <!-- The path that policies located at. Doesn't include subdirectory.                -->
                <attribute name="path" type="string" use="required"/>
                <!-- We can specify a pattern that to filter files under the directory, the pattern  -->
                <!-- is fully support Java Regular Expression.                                       -->
                <attribute name="pattern" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    
    <element name="ContextFactory" type="provider:ContextFactoryType" abstract="true"/>
    <complexType name="ContextFactoryType" abstract="true">
        <attribute name="an.xacml.engine.ContextFactory" type="string" use="optional" default="an.xacml.engine.DefaultContextFactory"/>
    </complexType>
    
    <element name="DefaultContextFactory" type="provider:DefaultContextFactoryType" substitutionGroup="provider:ContextFactory"/>
    <complexType name="DefaultContextFactoryType">
        <complexContent>
            <extension base="provider:ContextFactoryType">
                <!-- TODO: other attributes -->
            </extension>
        </complexContent>
    </complexType>
    
    <element name="CacheManager" type="provider:CacheManagerType"/>
    <complexType name="CacheManagerType">
        <sequence>
            <element ref="provider:PolicyCache"/>
            <element ref="provider:EvaluationResultCache"/>
        </sequence>
        <!-- Option to enable evaluation result cache. Default is enabled.                           -->
        <attribute name="enableEvaluationResultCache" type="boolean" use="optional" default="true"/>
    </complexType>
    
    <element name="PolicyCache" type="provider:PolicyCacheType"/>
    <element name="EvaluationResultCache" type="provider:EvaluationResultCacheType"/>
    <complexType name="CacheType" abstract="true">
        <!-- The max capacity of the cacahe, if this size is reached, it should first to cleanup     -->
        <!--  expired objects.                                                                       -->
        <attribute name="size" type="int" default="5000"/>
        <!-- expire time in millionseconds. If this value less than 0, it means Cacheables in this   -->
        <!-- cache will never expired unless force set them to expired.                              -->
        <attribute name="expireInterval" type="long" default="-1"/>
        <!-- There are 2 types, 1.expire time from create time; 2.expire time from last touch time.  -->
        <attribute name="expireType" type="string" default="access"/>
    </complexType>
    
    <complexType name="PolicyCacheType">
        <complexContent>
            <extension base="provider:CacheType">
                <!-- When this attribute value is "true", PolicyCache will add attribute value as    -->
                <!-- index, this may improve the performance.                                        -->
                <attribute name="enableAttributeValueIndex" type="boolean" default="true"/>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType name="EvaluationResultCacheType">
        <complexContent>
            <extension base="provider:CacheType"/>
        </complexContent>
    </complexType>
    
    <element name="PolicyResolverRegistry" type="provider:PolicyResolverRegistryType"/>
    <complexType name="PolicyResolverRegistryType">
        <sequence>
            <element ref="provider:PolicyResolver" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    
    <!-- Define an abstract type, so all implementations can extend it to add specific configuration -->
    <!-- items.                                                                                      -->
    <element name="PolicyResolver" type="provider:PolicyResolverType" abstract="true"/>
    <complexType name="PolicyResolverType" abstract="true">
        <attribute name="an.xacml.engine.PolicyResolver" type="string" use="required"/>
    </complexType>
    
    <!-- We provide a default policy resolver that need no extra configurations.                     -->
    <element name="DefaultDataStorePolicyResolver" type="provider:DefaultDataStorePolicyResolverType" substitutionGroup="provider:PolicyResolver"/>
    <complexType name="DefaultDataStorePolicyResolverType">
        <complexContent>
            <extension base="provider:PolicyResolverType"/>
        </complexContent>
    </complexType>
    
    <!-- PDP need to retrieve external attributes, so we need add such mechanism called "Attribute   --> 
    <!-- Retriever". The attribute retrievers just need implement an interface, and then register    -->
    <!-- to this registry. So that PDP can load them during startup.                                 -->
    <!-- All implementation should have a constructor with following signature:                      -->
    <!--     RetrieverImpl (ConfigElement config)                                                    -->
    <element name="AttributeRetrieverRegistry" type="provider:AttributeRetrieverRegistryType"/>
    <complexType name="AttributeRetrieverRegistryType">
        <sequence>
            <element ref="provider:AttributeRetriever" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    
    <!-- Define an abstract type, so all implementations can extend it to add specific configuration -->
    <!-- items.                                                                                      -->
    <element name="AttributeRetriever" type="provider:AttributeRetrieverType" abstract="true"/>
    <complexType name="AttributeRetrieverType" abstract="true">
        <attribute name="an.xacml.engine.AttributeRetriever" type="string" use="required"/>
    </complexType>
    
    <!-- We provide a default attribute retriever that need no extra configurations.                 -->
    <element name="DefaultAttributeRetriever" type="provider:DefaultAttributeRetrieverType" substitutionGroup="provider:AttributeRetriever"/>
    <complexType name="DefaultAttributeRetrieverType">
        <complexContent>
            <extension base="provider:AttributeRetrieverType"/>
        </complexContent>
    </complexType>
</schema>